function matrix fill (const matrix f,
                      const matrix xcoord)
    /*
    This function fills in missing values in a matrix using linear interpolation.
    Parameters:
      - f: The matrix containing the values to be filled.
      - xcoord: The matrix containing the corresponding x-coordinates for each value in f.
        Returns: The matrix with missing values filled using linear interpolation.
    */

    n = rows(f)
    valid = selifr(seq(1,n)', ok(f))
    nv = rows(valid)

    if nv < 2
        return {}
    endif

    to_fill = diff(valid)[2:] .> 1
    fills = selifr(valid[1:nv-1] ~ valid[2:nv], to_fill)
    ret = f
    nf = rows(fills)
    loop i = 1 .. nf
        lo = fills[i,1]
        hi = fills[i,2]
        xlo = xcoord[lo]
        xhi = xcoord[hi]
        d = (f[hi] - f[lo]) / (xhi - xlo)
        v = f[lo] + (xcoord[lo+1:hi-1] - xlo) * d
        ret[lo+1:hi-1] = v'
    endloop

    return ret
end function

function matrices fkd (const series x,
                       const series d,
                       bundle opts)
    v = values(d)
    n_factor_values = rows(v)
    matrix f = {}
    matrix kept = {}

    if n_factor_values > opts.MAXVAL
        printf "Too many values for factor (%d, max. 12)\n", n_factor_values
        return defarray(f, kept)
    endif

    matrices ret = array(2)
    matrix X = {}
    matrix Y = {}

    loop i = 1..n_factor_values
        di = v[i]
        series tmp = d == di ? x : NA
        nn = nobs(tmp)

        if nn >= opts.MINOBS
            kept ~= i

            # TODO: We may want to store the optimal bandwidths
            if opts.scale == 1
                # overwrite original scale parameter
                scalar opts.scale = optimal_bandwidth(tmp, opts)
            endif

            matrix kd = kdensity(tmp, opts.scale, opts.control)

            n = rows(kd)
            X |= kd[,1]
            Yi = mshape(NA, n, n_factor_values)
            Yi[,i] = kd[,2]

            if opts.cumulative
                Yi = cum(Yi)
                Yi = Yi ./ max(Yi)
            endif

            Y |= Yi
        endif
    endloop
    nk = nelem(kept)

    if nk > 0
        # fill up the NAs
        scalar n = rows(X)
        X = msortby(seq(1, n)' ~ X, 2)
        ndx = X[,1]
        X = X[,2]
        Z = mshape(NA, n, nk)

        loop i = 1..nk
            j = kept[i]
            Z[,i] = fill(Y[ndx,j], X)
        endloop

        # set up the column names
        f = Z ~ X
        strs = strvals(d, 1)
        if nelem(strs)
            strings clabels = strs[kept]
        else
            matrix v = values(d)
            strings clabels = array(nk)
            loop i = 1..nk
                clabels[i] = sprintf("%s = %d", opts.dname, v[kept[i]])
            endloop
        endif
        clabels = clabels + defarray(opts.xname)
        cnameset(f, clabels)
        ret = defarray(f, kept)
    endif

    return ret
end function


function scalar optimal_bandwidth (const series y,
                                   const bundle opts)
    /* Compute the optimal bandwidth using the KdeBandwidth package.
    return: scalar, optimal bandwidth */

    scalar bw = kde_bandwidth({y},
                              opts.bw_method,
                              opts.bw_skip_na,
                              opts.bw_verbose)

    return bw
end function


function bundle default_options (void)
    /* Bundle holding default values. */

    bundle ret = _(add_opts = "",
                   auto_dashtype = FALSE,
                   auto_pointtype = FALSE,
                   bw_method = "silverman",
                   bw_skip_na = TRUE,
                   bw_verbose = FALSE,
                   control = 0,
                   cumulative = FALSE,
                   dest = "display",
                   fontsize = 10,
                   fontsize_tics = 10,
                   grid = TRUE,
                   linewidth = 2.0,
                   logscale = FALSE,
                   MINOBS = 30,
                   MAXVAL = 12,
                   monochrome = FALSE,
                   nokey = FALSE,
                   pointsize = 0.75,
                   scale = 1,
                   single_yaxis = FALSE,
                   title = "",
                   width = 320,
                   height = 240,
                   ylabel = "",
                   xlabel = "")

    return ret
end function


function bundle fdensity_series (const series x,
                                 const series d,
                                 bundle opts)

    /*
    This function calculates the kernel density estimation for a given series.
    Parameters:
      - x: The series for which the kernel density is calculated.
      - d: The conditioning series.
      - opts: Bundle of options for the kernel density estimation.
    Returns:
      A bundle containing the kernel density estimation results and options.
    */

    # TODO: I guess the strings cannot be empty
    /*
    if strlen(opts.xname) == 0
        opts.xname = "(anonymous)"
    endif
    if strlen(opts.dname) == 0
        opts.dname = "(anonymous)"
    endif
    */

    matrices f_k = fkd(x, d, opts)
    kept = f_k[2]
    bundle ret = opts
    ret.err = 0

    if nelem(kept) == 0
        printf "Invalid conditioning\n"
        ret.err = 1
        return ret
    endif

    matrix f = f_k[1]
    ret.kept = kept
    ret.f = f

    return ret
end function


function bundles fdensity (const list L,
                           const series d,
                           bundle opts[null])
    /* code description
    return: type, description */

    scalar nL = nelem(L)
    bundles Ret = array(nL)
    bundle self = exists(opts) ? opts : _()
    self = self + default_options()
    strings xnames = varnames(L)
    string self.dname = argname(d)
    self.nL = nL

    if self.nL == 1
        self.xname = xnames[1]
        Ret[1] = fdensity_series(L[1], d, self)
        plot_fdensity(Ret[1], self)
    else
        gpbuild Plots
            loop i = 1..self.nL
                self.xname = xnames[i]
                Ret[i] = fdensity_series(L[i], d, self)

                self.nokey = i == 2 ? TRUE : self.nokey
                plot_fdensity(Ret[i], self)
            endloop
        end gpbuild

        gridplot_fdensity(Plots, self)
    endif

    return Ret
end function

function void gridplot_fdensity (const strings Plots,
                                 const bundle self)
    /* code description
    return: type, description */
    scalar width = ceil(self.width * sqrt(self.nL))
    scalar height = ceil(self.height * sqrt(self.nL))
    string dest = self.dest

    gridplot Plots --width=width --height=height --output="@dest"
end function



function void plot_fdensity (const bundle input,
                             const bundle opts)

    /*
    * Function: plot_fdensity
    * -----------------------
    * Plots the density function using the given input data and options.
    *
    * Parameters:
    *    input - A bundle containing the input data.
    *    opts - A bundle containing the plot options.
    *
    * Returns:
    *    None
    */

    matrix fdata = input.f
    string dest = opts.dest

    if strlen(opts.title)
        title = opts.title
    else
        title = sprintf("Kernel density of %s by %s", opts.xname, opts.dname)
    endif

    string plot_options = opts.auto_pointtype == TRUE ? "with-lp " : \
                         "with-lines "
    plot_options += opts.single_yaxis == TRUE ? "single-yaxis " : ""

    string linetype_options = ""
    if opts.auto_dashtype || opts.auto_pointtype || opts.monochrome
        linetype_options = "set for [i=1:8] linetype i "
        if opts.auto_dashtype
            linetype_options += "dashtype i "
        endif
        if opts.auto_pointtype
            linetype_options += sprintf("pointtype i ps %g ", opts.pointsize)
        endif
        if opts.monochrome
            linetype_options += "lc rgb 'black"
        endif
    endif

    string key_opts = opts.nokey == TRUE ? "set nokey" : ""
    string grid_opts = opts.grid == TRUE ? "set grid" : ""
    string logscale_opts = opts.logscale == TRUE ? "set logscale y 10" : ""

    plot fdata
        option @plot_options
        printf "%s", linetype_options
        printf "set termoption lw %d", opts.linewidth
        printf "set title \"%s\" font ',%d'", title, opts.fontsize
        printf "set ylabel \"%s\" font ',%d'", opts.ylabel, opts.fontsize
        printf "set xlabel \"%s\" font ',%d'", opts.xlabel, opts.fontsize
        printf "set xtics font ',%d'", opts.fontsize_tics
        printf "set ytics font ',%d'", opts.fontsize_tics
        printf "%s", key_opts
        printf "%s", grid_opts
        printf "%s", opts.add_opts
        printf "%s", logscale_opts
    end plot --output="@dest"
end function



function bundle fdensity_GUI (const series x "Input",
                              const series d "Factors",
                              scalar scale[0::1] "Bandwidth, 1=autom.",
                              int control[0:1:0] {"Gaussian", "Epanechnikov"})
    /* Function for creating GUI dialog box. */

    bundle self = default_options()
    self.scalar = scale
    self.control = control
    self.xname = argname(x)
    self.dname = argname(d)
    self.title = sprintf("Kernel density of %s by %s", self.xname, self.dname)

    matrices f_k = fkd(x, d, self)
    matrix kept = f_k[2]
    scalar self.err = FALSE

    if nelem(kept) == 0
        funcerr "Invalid conditioning"
        self.err = TRUE
        return self
    endif

    self.kept = kept
    matrix self.f = f_k[1]
    matrix f = self.f  # for plotting only

    plot_fdensity(self, self)

    return self
end function


function matrix remove_nas (const matrix y)
    /* Remove missing values (NAs) from a matrix.

    Parameters:
    y (matrix): Input matrix with potential missing values.

    Returns:
    matrix: The input matrix with all NAs removed. */

    return selifr(y, ok(y))
end function


function scalar kde_bandwidth (matrix input,
                               string method,
                               const int skip_na[0:1:1],
                               const int verbose[0:1:0])
    /*
       Calculate the bandwidth for kernel density estimation (KDE) using
       various methods for uni-variate data only (at the moment).

       Parameters:
       input (matrix): Input data as a column vector.
       method (string): Method for bandwidth selection. Supported value: "silverman".
       when computing the standard devation. FALSE not to correct, TRUE to
       correct.
       skip_na (bool): Indicator for skipping missing values. 0 to include missing values, 1 to remove them.
       verbose (bool): Indicator for printing bandwidth selection results. FALSE to disable, TRUE to enable.

       Returns:
       scalar: The calculated bandwidth for KDE.

       Raises:
       Error: If the input data has more than one column.
       Error: If an unsupported method of bandwidth selection is specified.
    */

    string method = tolower(method)
    errorif(cols(input) > 1, "Only column vector is supported")
    matrix input = skip_na == TRUE ? remove_nas(input) : input
    scalar n = rows(input)

    if method == "silverman"
        # This value makes sure that gretl's built-in kdensity() automatically
        # applies Silverman's method. No need to do the job on our own.
        scalar bandwidth = 1

        # Uncomment the following for a manual computation of Silverman's method
        #scalar bandwidth = bandwidth_silverman(input, std_dev, n)
    else
        errorif(TRUE, "Unsupported method of bandwidth selection.")
    endif

    if verbose
        bandwidth_print(method, skip_na, bandwidth)
    endif

    return bandwidth
end function


function void bandwidth_print (const string method,
                               const int skip_na[0:1:1],
                               const scalar bandwidth)
    /* Print out results. */

    string str_skip_na = skip_na == TRUE ? "TRUE" : "FALSE"

    printf("\n*** Bandwidth Selection Results ***\n")
    printf("Method: %s\n", method)
    printf("Skip NAs: %s\n", str_skip_na)
    printf("Bandwidth: %g\n\n", bandwidth)
end function


# This function is never called as we rely on gretl's built-in computation
# But keep it for pedagocical reasons
function scalar bandwidth_silverman (const matrix y,
                                     const scalar std_dev,
                                     const scalar n)
    /* Calculate the bandwidth for kernel density estimation (KDE) using Silverman's rule.

    Parameters:
    y (matrix): Input data as a column vector.
    std_dev (scalar): Standard deviation of the input data.
    n (scalar): Number of observations in the input data.

    Returns:
    scalar: The calculated bandwidth for KDE using Silverman's rule. */

    scalar iqr = quantile(y, 0.75) - quantile(y, 0.25)
    matrix value = min(std_dev ~ (iqr / 1.34))
    scalar bandwidth = 0.9 * value * (n^(-0.2))

    return bandwidth
end function
